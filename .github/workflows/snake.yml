name: Generate Snake Reworked

on:
  schedule:
    - cron: "0 0 * * *" # Executa diariamente à meia-noite
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Baixar o repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # Passo 2: Instalar dependências necessárias (xmllint para validação XML)
      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      # Passo 3: Gerar o SVG da "minhoca"
      - name: Generate snake SVG
        uses: Platane/snk@v3
        with:
          github_user_name: solundev
          outputs: |
            dist/github-contribution-grid-snake.svg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Passo 4: Verificar se o arquivo SVG foi gerado e não está vazio
      - name: Verify SVG file exists and is not empty
        run: |
          FILE="dist/github-contribution-grid-snake.svg"
          if [ ! -f "$FILE" ]; then
            echo "Error: SVG file was not generated."
            exit 1
          fi
          if [ ! -s "$FILE" ]; then
            echo "Error: SVG file is empty."
            exit 1
          fi

      # Passo 5: Corrigir permissões na pasta dist
      - name: Fix permissions for the dist folder
        run: sudo chmod -R 777 dist

      # Passo 6: Fazer backup do SVG original
      - name: Backup original SVG
        run: |
          cp dist/github-contribution-grid-snake.svg dist/github-contribution-grid-snake-original.svg

      # Passo 7: Adicionar estilo animado e classe "rainbow" nos elementos do SVG
      - name: Inject animated rainbow style into SVG
        run: |
          FILE="dist/github-contribution-grid-snake.svg"
          BACKUP_FILE="dist/github-contribution-grid-snake-original.svg"
          
          # Define o bloco de estilo com keyframes para animação de cores
          cat <<EOF > style_block.txt
          <style>
          @keyframes rainbow {
            0% { fill: #FF0000; }
            20% { fill: #FF7F00; }
            40% { fill: #FFFF00; }
            60% { fill: #00FF00; }
            80% { fill: #0000FF; }
            100% { fill: #8B00FF; }
          }
          .rainbow {
            animation: rainbow 5s infinite;
          }
          </style>
          EOF

          # Inserir o estilo após a tag <svg>
          sed -e '/<svg>/r style_block.txt' "$FILE" > tmp1.svg

          # Adicionar a classe .rainbow a todos os elementos com atributo fill
          sed -i 's/fill="[^"]*"/& class="rainbow"/g' tmp1.svg

          # Validar o SVG modificado
          if ! xmllint --noout tmp1.svg; then
            echo "Error: Modified SVG is not well-formed. Restoring original file."
            mv "$BACKUP_FILE" "$FILE"
            exit 1
          fi

          # Substituir o arquivo original pelo arquivo modificado
          mv tmp1.svg "$FILE"

      # Passo 8: Depuração - Exibir conteúdo do SVG modificado
      - name: Debug - Output modified SVG content
        run: |
          echo "Modified SVG content:"
          cat dist/github-contribution-grid-snake.svg

      # Passo 9: Verificar se o SVG modificado foi gerado corretamente
      - name: Verify modified SVG
        run: |
          FILE="dist/github-contribution-grid-snake.svg"
          if [ ! -f "$FILE" ]; then
            echo "Error: Modified SVG file was not found."
            exit 1
          fi
          if [ ! -s "$FILE" ]; then
            echo "Error: Modified SVG file is empty."
            exit 1
          fi

          # Validar o arquivo SVG final
          if ! xmllint --noout "$FILE"; then
            echo "Error: SVG file is not well-formed."
            exit 1
          fi

      # Passo 10: Commit e push do SVG modificado
      - name: Commit and Push result
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add dist/
          git commit -m "Generate rainbow snake animation"
          git push origin HEAD:output --force
